{"version":3,"sources":["components/header/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","score","highScore","Clicky","onClick","id","alt","name","src","image","App","state","fractals","count","clicked","shuffle","array","i","length","j","Math","floor","random","_ref","shuffledArray","_this","setState","includes","concat","_this2","this","header","map","fractal","Main","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6uDA2BeA,MAxBf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,0BAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,UAEfJ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMM,MAAlB,iBAAuCN,EAAMO,UAA7C,QAKZN,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oCAEZH,EAAAC,EAAAC,cAAA,4BCTDK,MAXf,SAAiBR,GACb,OACYC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,2DACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,qBACjBH,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAMT,EAAMS,QAAQT,EAAMU,MACxCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQO,IAAOX,EAAMY,KAAMC,IAAOb,EAAMc,mBC0ExDC,6MAzEbC,MAAQ,CACNX,QAAU,0BACVY,WACAC,MAAO,EACPZ,MAAO,EACPC,UAAW,EACXY,QAAS,MAEZC,QAAU,SAACC,GACV,IAAK,IAAIC,EAAID,EAAME,OAAQ,EAAGD,EAAI,EAAGA,IAAI,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IADDM,EAEhB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgCM,EAAA,GAE5BP,EAAMG,GAFsBI,EAAA,GAIzC,OAAOP,KAGTZ,QAAU,SAACC,GAET,IAAMmB,EAAgBC,EAAKV,QAAQH,GACnCa,EAAKC,SAAS,CAACd,SAAUY,IAIvBC,EAAKd,MAAMG,QAAQa,SAAStB,GAC9BoB,EAAKC,SAAS,CAAEzB,MAAQ,EAAGa,QAAS,GAAId,QAAS,cAGjDyB,EAAKC,SAAS,CACZZ,QAASW,EAAKd,MAAMG,QAAQc,OAAO,CAACvB,IACpCJ,MAAOwB,EAAKd,MAAMV,MAAQ,EAC1BD,QAAS,YAITyB,EAAKd,MAAMV,MAAQwB,EAAKd,MAAMT,WAChCuB,EAAKC,SAAS,CAACxB,UAAWuB,EAAKd,MAAMV,iFAiB5B,IAAA4B,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACiC,EAAD,CAAQ9B,MAAS6B,KAAKnB,MAAMV,MAC5BC,UAAa4B,KAAKnB,MAAMT,UACxBF,QAAW8B,KAAKnB,MAAMX,UACtB8B,KAAKnB,MAAMC,SAASoB,IAAI,SAAAC,GAAO,OAE9BrC,EAAAC,EAAAC,cAACoC,EAAD,CAAQ9B,QAASyB,EAAKzB,QACtBC,GAAM4B,EAAQ5B,GACd8B,IAAOF,EAAQ5B,GACfI,MAASwB,EAAQxB,kBAhEP2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99cdc93a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props){\r\n    return(\r\n        <div className=\"header\">\r\n            <div className=\"container-fluid text-center bg-1  \">\r\n                <div className=\"row\">\r\n                    <div className = \"col\">\r\n                        <h1>Clicky Game</h1>\r\n                    </div>\r\n                    <div className = \"col\">\r\n                        <h1>{props.message}</h1>\r\n                    </div>\r\n                    <div className = \"col\">\r\n                        <h1>Score: {props.score} | Top Score: {props.highScore} </h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className= \"container-fluid text-center bg-2\">\r\n\r\n                <h1>Clicky Game</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Clicky (props){\r\n    return (\r\n                <div className = \"fractal container col-lg-3 col-md-4 col-xs-6 float-left\" >\r\n                <div className = \"img-container row\">\r\n                <div onClick={() => props.onClick(props.id)}>\r\n                <img className=\"image\" alt = {props.name} src = {props.image}/>\r\n                </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Clicky;","import React, { Component } from 'react';\nimport Header from \"./components/header/index\"\nimport Clicky from \"./components/Main/index\"\nimport fractals from \"./fractals.json\";\n\n\n\nclass App extends Component {\n  state = {\n    message : \"Click an image to begin\",\n    fractals,\n    count: 0,\n    score: 0,\n    highScore: 0,\n    clicked: []\n  }\n shuffle = (array) => {\n  for (var i = array.length -1; i > 0; i--){\n    const j = Math.floor(Math.random() * (i+1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n }\n\nonClick = (id) => {\n\n  const shuffledArray = this.shuffle(fractals);\n  this.setState({fractals: shuffledArray});\n\n  \n  // if fractal count < 0 then\nif (this.state.clicked.includes(id)){\n  this.setState({ score : 0, clicked: [], message: \"Game Over\"});\n}\nelse {\n  this.setState({\n    clicked: this.state.clicked.concat([id]),\n    score: this.state.score + 1,\n    message: \"Correct\",\n  })\n}\n\nif (this.state.score > this.state.highScore){\n  this.setState({highScore: this.state.score})\n}\n  // fractal count + 1 \n  // shuffle\n  //score + 1\n  // if score > highscore >>>> highscore  ==== score\n  //message is guessed correctly\n\n/**********ELSE******/\n//if fractal count === 1\n//shuffle\n//set score state to 0\n//message Wrong!\n//\n\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n       <Header score = {this.state.score}\n       highScore = {this.state.highScore} \n       message = {this.state.message}/>\n      {this.state.fractals.map(fractal =>(\n       \n        <Clicky onClick={this.onClick}\n        id = {fractal.id}\n        key = {fractal.id}\n        image = {fractal.image} />\n       \n      ))}\n       \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}